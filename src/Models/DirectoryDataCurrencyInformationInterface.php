<?php
/*
 * MagentoCommunityLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace MagentoCommunityLib\Models;

use JsonSerializable;

/**
 *Currency Information interface.
 */
class DirectoryDataCurrencyInformationInterface implements JsonSerializable
{
    /**
     * The base currency code for the store.
     * @required
     * @maps base_currency_code
     * @var string $baseCurrencyCode public property
     */
    public $baseCurrencyCode;

    /**
     * The currency symbol of the base currency for the store.
     * @required
     * @maps base_currency_symbol
     * @var string $baseCurrencySymbol public property
     */
    public $baseCurrencySymbol;

    /**
     * The default display currency code for the store.
     * @required
     * @maps default_display_currency_code
     * @var string $defaultDisplayCurrencyCode public property
     */
    public $defaultDisplayCurrencyCode;

    /**
     * The currency symbol of the default display currency for the store.
     * @required
     * @maps default_display_currency_symbol
     * @var string $defaultDisplayCurrencySymbol public property
     */
    public $defaultDisplayCurrencySymbol;

    /**
     * The list of allowed currency codes for the store.
     * @required
     * @maps available_currency_codes
     * @var array $availableCurrencyCodes public property
     */
    public $availableCurrencyCodes;

    /**
     * The list of exchange rate information for the store.
     * @required
     * @maps exchange_rates
     * @var \MagentoCommunityLib\Models\DirectoryDataExchangeRateInterface[] $exchangeRates public property
     */
    public $exchangeRates;

    /**
     * ExtensionInterface class for @see \Magento\Directory\Api\Data\CurrencyInformationInterface
     * @maps extension_attributes
     * @var object|null $extensionAttributes public property
     */
    public $extensionAttributes;

    /**
     * Constructor to set initial or default values of member properties
     * @param string $baseCurrencyCode             Initialization value for $this->baseCurrencyCode
     * @param string $baseCurrencySymbol           Initialization value for $this->baseCurrencySymbol
     * @param string $defaultDisplayCurrencyCode   Initialization value for $this->defaultDisplayCurrencyCode
     * @param string $defaultDisplayCurrencySymbol Initialization value for $this->defaultDisplayCurrencySymbol
     * @param array  $availableCurrencyCodes       Initialization value for $this->availableCurrencyCodes
     * @param array  $exchangeRates                Initialization value for $this->exchangeRates
     * @param object $extensionAttributes          Initialization value for $this->extensionAttributes
     */
    public function __construct()
    {
        if (7 == func_num_args()) {
            $this->baseCurrencyCode             = func_get_arg(0);
            $this->baseCurrencySymbol           = func_get_arg(1);
            $this->defaultDisplayCurrencyCode   = func_get_arg(2);
            $this->defaultDisplayCurrencySymbol = func_get_arg(3);
            $this->availableCurrencyCodes       = func_get_arg(4);
            $this->exchangeRates                = func_get_arg(5);
            $this->extensionAttributes          = func_get_arg(6);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['base_currency_code']              = $this->baseCurrencyCode;
        $json['base_currency_symbol']            = $this->baseCurrencySymbol;
        $json['default_display_currency_code']   = $this->defaultDisplayCurrencyCode;
        $json['default_display_currency_symbol'] = $this->defaultDisplayCurrencySymbol;
        $json['available_currency_codes']        = $this->availableCurrencyCodes;
        $json['exchange_rates']                  = $this->exchangeRates;
        $json['extension_attributes']            = $this->extensionAttributes;

        return $json;
    }
}
