<?php
/*
 * MagentoCommunityLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace MagentoCommunityLib\Models;

use JsonSerializable;

/**
 * @todo Write general description for this model
 */
class CatalogDataProductAttributeInterface implements JsonSerializable
{
    /**
     * Code of the attribute.
     * @required
     * @maps attribute_code
     * @var string $attributeCode public property
     */
    public $attributeCode;

    /**
     * HTML for input element.
     * @required
     * @maps frontend_input
     * @var string $frontendInput public property
     */
    public $frontendInput;

    /**
     * Entity type id
     * @required
     * @maps entity_type_id
     * @var string $entityTypeId public property
     */
    public $entityTypeId;

    /**
     * Attribute is required.
     * @required
     * @maps is_required
     * @var bool $isRequired public property
     */
    public $isRequired;

    /**
     * Frontend label for each store
     * @required
     * @maps frontend_labels
     * @var \MagentoCommunityLib\Models\EavDataAttributeFrontendLabelInterface[] $frontendLabels public property
     */
    public $frontendLabels;

    /**
     * WYSIWYG flag
     * @maps is_wysiwyg_enabled
     * @var bool|null $isWysiwygEnabled public property
     */
    public $isWysiwygEnabled;

    /**
     * The HTML tags are allowed on the frontend
     * @maps is_html_allowed_on_front
     * @var bool|null $isHtmlAllowedOnFront public property
     */
    public $isHtmlAllowedOnFront;

    /**
     * It is used for sorting in product listing
     * @maps used_for_sort_by
     * @var bool|null $usedForSortBy public property
     */
    public $usedForSortBy;

    /**
     * It used in layered navigation
     * @maps is_filterable
     * @var bool|null $isFilterable public property
     */
    public $isFilterable;

    /**
     * It is used in search results layered navigation
     * @maps is_filterable_in_search
     * @var bool|null $isFilterableInSearch public property
     */
    public $isFilterableInSearch;

    /**
     * It is used in catalog product grid
     * @maps is_used_in_grid
     * @var bool|null $isUsedInGrid public property
     */
    public $isUsedInGrid;

    /**
     * It is visible in catalog product grid
     * @maps is_visible_in_grid
     * @var bool|null $isVisibleInGrid public property
     */
    public $isVisibleInGrid;

    /**
     * It is filterable in catalog product grid
     * @maps is_filterable_in_grid
     * @var bool|null $isFilterableInGrid public property
     */
    public $isFilterableInGrid;

    /**
     * Position
     * @var integer|null $position public property
     */
    public $position;

    /**
     * Apply to value for the element
     * @maps apply_to
     * @var array|null $applyTo public property
     */
    public $applyTo;

    /**
     * The attribute can be used in Quick Search
     * @maps is_searchable
     * @var string|null $isSearchable public property
     */
    public $isSearchable;

    /**
     * The attribute can be used in Advanced Search
     * @maps is_visible_in_advanced_search
     * @var string|null $isVisibleInAdvancedSearch public property
     */
    public $isVisibleInAdvancedSearch;

    /**
     * The attribute can be compared on the frontend
     * @maps is_comparable
     * @var string|null $isComparable public property
     */
    public $isComparable;

    /**
     * The attribute can be used for promo rules
     * @maps is_used_for_promo_rules
     * @var string|null $isUsedForPromoRules public property
     */
    public $isUsedForPromoRules;

    /**
     * The attribute is visible on the frontend
     * @maps is_visible_on_front
     * @var string|null $isVisibleOnFront public property
     */
    public $isVisibleOnFront;

    /**
     * The attribute can be used in product listing
     * @maps used_in_product_listing
     * @var string|null $usedInProductListing public property
     */
    public $usedInProductListing;

    /**
     * Attribute is visible on frontend.
     * @maps is_visible
     * @var bool|null $isVisible public property
     */
    public $isVisible;

    /**
     * Attribute scope
     * @var string|null $scope public property
     */
    public $scope;

    /**
     * ExtensionInterface class for @see \Magento\Catalog\Api\Data\EavAttributeInterface
     * @maps extension_attributes
     * @var object|null $extensionAttributes public property
     */
    public $extensionAttributes;

    /**
     * Id of the attribute.
     * @maps attribute_id
     * @var integer|null $attributeId public property
     */
    public $attributeId;

    /**
     * Options of the attribute (key => value pairs for select)
     * @var \MagentoCommunityLib\Models\EavDataAttributeOptionInterface[]|null $options public property
     */
    public $options;

    /**
     * Current attribute has been defined by a user.
     * @maps is_user_defined
     * @var bool|null $isUserDefined public property
     */
    public $isUserDefined;

    /**
     * Frontend label for default store
     * @maps default_frontend_label
     * @var string|null $defaultFrontendLabel public property
     */
    public $defaultFrontendLabel;

    /**
     * The note attribute for the element.
     * @var string|null $note public property
     */
    public $note;

    /**
     * Backend type.
     * @maps backend_type
     * @var string|null $backendType public property
     */
    public $backendType;

    /**
     * Backend model
     * @maps backend_model
     * @var string|null $backendModel public property
     */
    public $backendModel;

    /**
     * Source model
     * @maps source_model
     * @var string|null $sourceModel public property
     */
    public $sourceModel;

    /**
     * Default value for the element.
     * @maps default_value
     * @var string|null $defaultValue public property
     */
    public $defaultValue;

    /**
     * This is a unique attribute
     * @maps is_unique
     * @var string|null $isUnique public property
     */
    public $isUnique;

    /**
     * Frontend class of attribute
     * @maps frontend_class
     * @var string|null $frontendClass public property
     */
    public $frontendClass;

    /**
     * Validation rules.
     * @maps validation_rules
     * @var \MagentoCommunityLib\Models\EavDataAttributeValidationRuleInterface[]|null $validationRules public property
     */
    public $validationRules;

    /**
     * Custom attributes values.
     * @maps custom_attributes
     * @var \MagentoCommunityLib\Models\FrameworkAttributeInterface[]|null $customAttributes public property
     */
    public $customAttributes;

    /**
     * Constructor to set initial or default values of member properties
     * @param string  $attributeCode             Initialization value for $this->attributeCode
     * @param string  $frontendInput             Initialization value for $this->frontendInput
     * @param string  $entityTypeId              Initialization value for $this->entityTypeId
     * @param bool    $isRequired                Initialization value for $this->isRequired
     * @param array   $frontendLabels            Initialization value for $this->frontendLabels
     * @param bool    $isWysiwygEnabled          Initialization value for $this->isWysiwygEnabled
     * @param bool    $isHtmlAllowedOnFront      Initialization value for $this->isHtmlAllowedOnFront
     * @param bool    $usedForSortBy             Initialization value for $this->usedForSortBy
     * @param bool    $isFilterable              Initialization value for $this->isFilterable
     * @param bool    $isFilterableInSearch      Initialization value for $this->isFilterableInSearch
     * @param bool    $isUsedInGrid              Initialization value for $this->isUsedInGrid
     * @param bool    $isVisibleInGrid           Initialization value for $this->isVisibleInGrid
     * @param bool    $isFilterableInGrid        Initialization value for $this->isFilterableInGrid
     * @param integer $position                  Initialization value for $this->position
     * @param array   $applyTo                   Initialization value for $this->applyTo
     * @param string  $isSearchable              Initialization value for $this->isSearchable
     * @param string  $isVisibleInAdvancedSearch Initialization value for $this->isVisibleInAdvancedSearch
     * @param string  $isComparable              Initialization value for $this->isComparable
     * @param string  $isUsedForPromoRules       Initialization value for $this->isUsedForPromoRules
     * @param string  $isVisibleOnFront          Initialization value for $this->isVisibleOnFront
     * @param string  $usedInProductListing      Initialization value for $this->usedInProductListing
     * @param bool    $isVisible                 Initialization value for $this->isVisible
     * @param string  $scope                     Initialization value for $this->scope
     * @param object  $extensionAttributes       Initialization value for $this->extensionAttributes
     * @param integer $attributeId               Initialization value for $this->attributeId
     * @param array   $options                   Initialization value for $this->options
     * @param bool    $isUserDefined             Initialization value for $this->isUserDefined
     * @param string  $defaultFrontendLabel      Initialization value for $this->defaultFrontendLabel
     * @param string  $note                      Initialization value for $this->note
     * @param string  $backendType               Initialization value for $this->backendType
     * @param string  $backendModel              Initialization value for $this->backendModel
     * @param string  $sourceModel               Initialization value for $this->sourceModel
     * @param string  $defaultValue              Initialization value for $this->defaultValue
     * @param string  $isUnique                  Initialization value for $this->isUnique
     * @param string  $frontendClass             Initialization value for $this->frontendClass
     * @param array   $validationRules           Initialization value for $this->validationRules
     * @param array   $customAttributes          Initialization value for $this->customAttributes
     */
    public function __construct()
    {
        if (37 == func_num_args()) {
            $this->attributeCode             = func_get_arg(0);
            $this->frontendInput             = func_get_arg(1);
            $this->entityTypeId              = func_get_arg(2);
            $this->isRequired                = func_get_arg(3);
            $this->frontendLabels            = func_get_arg(4);
            $this->isWysiwygEnabled          = func_get_arg(5);
            $this->isHtmlAllowedOnFront      = func_get_arg(6);
            $this->usedForSortBy             = func_get_arg(7);
            $this->isFilterable              = func_get_arg(8);
            $this->isFilterableInSearch      = func_get_arg(9);
            $this->isUsedInGrid              = func_get_arg(10);
            $this->isVisibleInGrid           = func_get_arg(11);
            $this->isFilterableInGrid        = func_get_arg(12);
            $this->position                  = func_get_arg(13);
            $this->applyTo                   = func_get_arg(14);
            $this->isSearchable              = func_get_arg(15);
            $this->isVisibleInAdvancedSearch = func_get_arg(16);
            $this->isComparable              = func_get_arg(17);
            $this->isUsedForPromoRules       = func_get_arg(18);
            $this->isVisibleOnFront          = func_get_arg(19);
            $this->usedInProductListing      = func_get_arg(20);
            $this->isVisible                 = func_get_arg(21);
            $this->scope                     = func_get_arg(22);
            $this->extensionAttributes       = func_get_arg(23);
            $this->attributeId               = func_get_arg(24);
            $this->options                   = func_get_arg(25);
            $this->isUserDefined             = func_get_arg(26);
            $this->defaultFrontendLabel      = func_get_arg(27);
            $this->note                      = func_get_arg(28);
            $this->backendType               = func_get_arg(29);
            $this->backendModel              = func_get_arg(30);
            $this->sourceModel               = func_get_arg(31);
            $this->defaultValue              = func_get_arg(32);
            $this->isUnique                  = func_get_arg(33);
            $this->frontendClass             = func_get_arg(34);
            $this->validationRules           = func_get_arg(35);
            $this->customAttributes          = func_get_arg(36);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['attribute_code']                = $this->attributeCode;
        $json['frontend_input']                = $this->frontendInput;
        $json['entity_type_id']                = $this->entityTypeId;
        $json['is_required']                   = $this->isRequired;
        $json['frontend_labels']               = $this->frontendLabels;
        $json['is_wysiwyg_enabled']            = $this->isWysiwygEnabled;
        $json['is_html_allowed_on_front']      = $this->isHtmlAllowedOnFront;
        $json['used_for_sort_by']              = $this->usedForSortBy;
        $json['is_filterable']                 = $this->isFilterable;
        $json['is_filterable_in_search']       = $this->isFilterableInSearch;
        $json['is_used_in_grid']               = $this->isUsedInGrid;
        $json['is_visible_in_grid']            = $this->isVisibleInGrid;
        $json['is_filterable_in_grid']         = $this->isFilterableInGrid;
        $json['position']                      = $this->position;
        $json['apply_to']                      = $this->applyTo;
        $json['is_searchable']                 = $this->isSearchable;
        $json['is_visible_in_advanced_search'] = $this->isVisibleInAdvancedSearch;
        $json['is_comparable']                 = $this->isComparable;
        $json['is_used_for_promo_rules']       = $this->isUsedForPromoRules;
        $json['is_visible_on_front']           = $this->isVisibleOnFront;
        $json['used_in_product_listing']       = $this->usedInProductListing;
        $json['is_visible']                    = $this->isVisible;
        $json['scope']                         = $this->scope;
        $json['extension_attributes']          = $this->extensionAttributes;
        $json['attribute_id']                  = $this->attributeId;
        $json['options']                       = $this->options;
        $json['is_user_defined']               = $this->isUserDefined;
        $json['default_frontend_label']        = $this->defaultFrontendLabel;
        $json['note']                          = $this->note;
        $json['backend_type']                  = $this->backendType;
        $json['backend_model']                 = $this->backendModel;
        $json['source_model']                  = $this->sourceModel;
        $json['default_value']                 = $this->defaultValue;
        $json['is_unique']                     = $this->isUnique;
        $json['frontend_class']                = $this->frontendClass;
        $json['validation_rules']              = $this->validationRules;
        $json['custom_attributes']             = $this->customAttributes;

        return $json;
    }
}
