<?php
/*
 * MagentoCommunityLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace MagentoCommunityLib\Models;

use JsonSerializable;

/**
 * @todo Write general description for this model
 */
class CatalogInventoryDataStockItemInterface implements JsonSerializable
{
    /**
     * @todo Write general description for this property
     * @required
     * @var double $qty public property
     */
    public $qty;

    /**
     * Stock Availability
     * @required
     * @maps is_in_stock
     * @var bool $isInStock public property
     */
    public $isInStock;

    /**
     * @todo Write general description for this property
     * @required
     * @maps is_qty_decimal
     * @var bool $isQtyDecimal public property
     */
    public $isQtyDecimal;

    /**
     * @todo Write general description for this property
     * @required
     * @maps show_default_notification_message
     * @var bool $showDefaultNotificationMessage public property
     */
    public $showDefaultNotificationMessage;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_min_qty
     * @var bool $useConfigMinQty public property
     */
    public $useConfigMinQty;

    /**
     * Minimal quantity available for item status in stock
     * @required
     * @maps min_qty
     * @var double $minQty public property
     */
    public $minQty;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_min_sale_qty
     * @var integer $useConfigMinSaleQty public property
     */
    public $useConfigMinSaleQty;

    /**
     * Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
     * @required
     * @maps min_sale_qty
     * @var double $minSaleQty public property
     */
    public $minSaleQty;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_max_sale_qty
     * @var bool $useConfigMaxSaleQty public property
     */
    public $useConfigMaxSaleQty;

    /**
     * Maximum Qty Allowed in Shopping Cart data wrapper
     * @required
     * @maps max_sale_qty
     * @var double $maxSaleQty public property
     */
    public $maxSaleQty;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_backorders
     * @var bool $useConfigBackorders public property
     */
    public $useConfigBackorders;

    /**
     * Backorders status
     * @required
     * @var integer $backorders public property
     */
    public $backorders;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_notify_stock_qty
     * @var bool $useConfigNotifyStockQty public property
     */
    public $useConfigNotifyStockQty;

    /**
     * Notify for Quantity Below data wrapper
     * @required
     * @maps notify_stock_qty
     * @var double $notifyStockQty public property
     */
    public $notifyStockQty;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_qty_increments
     * @var bool $useConfigQtyIncrements public property
     */
    public $useConfigQtyIncrements;

    /**
     * Quantity Increments data wrapper
     * @required
     * @maps qty_increments
     * @var double $qtyIncrements public property
     */
    public $qtyIncrements;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_enable_qty_inc
     * @var bool $useConfigEnableQtyInc public property
     */
    public $useConfigEnableQtyInc;

    /**
     * Whether Quantity Increments is enabled
     * @required
     * @maps enable_qty_increments
     * @var bool $enableQtyIncrements public property
     */
    public $enableQtyIncrements;

    /**
     * @todo Write general description for this property
     * @required
     * @maps use_config_manage_stock
     * @var bool $useConfigManageStock public property
     */
    public $useConfigManageStock;

    /**
     * Can Manage Stock
     * @required
     * @maps manage_stock
     * @var bool $manageStock public property
     */
    public $manageStock;

    /**
     * @todo Write general description for this property
     * @required
     * @maps low_stock_date
     * @var string $lowStockDate public property
     */
    public $lowStockDate;

    /**
     * @todo Write general description for this property
     * @required
     * @maps is_decimal_divided
     * @var bool $isDecimalDivided public property
     */
    public $isDecimalDivided;

    /**
     * @todo Write general description for this property
     * @required
     * @maps stock_status_changed_auto
     * @var integer $stockStatusChangedAuto public property
     */
    public $stockStatusChangedAuto;

    /**
     * @todo Write general description for this property
     * @maps item_id
     * @var integer|null $itemId public property
     */
    public $itemId;

    /**
     * @todo Write general description for this property
     * @maps product_id
     * @var integer|null $productId public property
     */
    public $productId;

    /**
     * Stock identifier
     * @maps stock_id
     * @var integer|null $stockId public property
     */
    public $stockId;

    /**
     * ExtensionInterface class for @see \Magento\CatalogInventory\Api\Data\StockItemInterface
     * @maps extension_attributes
     * @var object|null $extensionAttributes public property
     */
    public $extensionAttributes;

    /**
     * Constructor to set initial or default values of member properties
     * @param double  $qty                            Initialization value for $this->qty
     * @param bool    $isInStock                      Initialization value for $this->isInStock
     * @param bool    $isQtyDecimal                   Initialization value for $this->isQtyDecimal
     * @param bool    $showDefaultNotificationMessage Initialization value for $this->showDefaultNotificationMessage
     * @param bool    $useConfigMinQty                Initialization value for $this->useConfigMinQty
     * @param double  $minQty                         Initialization value for $this->minQty
     * @param integer $useConfigMinSaleQty            Initialization value for $this->useConfigMinSaleQty
     * @param double  $minSaleQty                     Initialization value for $this->minSaleQty
     * @param bool    $useConfigMaxSaleQty            Initialization value for $this->useConfigMaxSaleQty
     * @param double  $maxSaleQty                     Initialization value for $this->maxSaleQty
     * @param bool    $useConfigBackorders            Initialization value for $this->useConfigBackorders
     * @param integer $backorders                     Initialization value for $this->backorders
     * @param bool    $useConfigNotifyStockQty        Initialization value for $this->useConfigNotifyStockQty
     * @param double  $notifyStockQty                 Initialization value for $this->notifyStockQty
     * @param bool    $useConfigQtyIncrements         Initialization value for $this->useConfigQtyIncrements
     * @param double  $qtyIncrements                  Initialization value for $this->qtyIncrements
     * @param bool    $useConfigEnableQtyInc          Initialization value for $this->useConfigEnableQtyInc
     * @param bool    $enableQtyIncrements            Initialization value for $this->enableQtyIncrements
     * @param bool    $useConfigManageStock           Initialization value for $this->useConfigManageStock
     * @param bool    $manageStock                    Initialization value for $this->manageStock
     * @param string  $lowStockDate                   Initialization value for $this->lowStockDate
     * @param bool    $isDecimalDivided               Initialization value for $this->isDecimalDivided
     * @param integer $stockStatusChangedAuto         Initialization value for $this->stockStatusChangedAuto
     * @param integer $itemId                         Initialization value for $this->itemId
     * @param integer $productId                      Initialization value for $this->productId
     * @param integer $stockId                        Initialization value for $this->stockId
     * @param object  $extensionAttributes            Initialization value for $this->extensionAttributes
     */
    public function __construct()
    {
        if (27 == func_num_args()) {
            $this->qty                            = func_get_arg(0);
            $this->isInStock                      = func_get_arg(1);
            $this->isQtyDecimal                   = func_get_arg(2);
            $this->showDefaultNotificationMessage = func_get_arg(3);
            $this->useConfigMinQty                = func_get_arg(4);
            $this->minQty                         = func_get_arg(5);
            $this->useConfigMinSaleQty            = func_get_arg(6);
            $this->minSaleQty                     = func_get_arg(7);
            $this->useConfigMaxSaleQty            = func_get_arg(8);
            $this->maxSaleQty                     = func_get_arg(9);
            $this->useConfigBackorders            = func_get_arg(10);
            $this->backorders                     = func_get_arg(11);
            $this->useConfigNotifyStockQty        = func_get_arg(12);
            $this->notifyStockQty                 = func_get_arg(13);
            $this->useConfigQtyIncrements         = func_get_arg(14);
            $this->qtyIncrements                  = func_get_arg(15);
            $this->useConfigEnableQtyInc          = func_get_arg(16);
            $this->enableQtyIncrements            = func_get_arg(17);
            $this->useConfigManageStock           = func_get_arg(18);
            $this->manageStock                    = func_get_arg(19);
            $this->lowStockDate                   = func_get_arg(20);
            $this->isDecimalDivided               = func_get_arg(21);
            $this->stockStatusChangedAuto         = func_get_arg(22);
            $this->itemId                         = func_get_arg(23);
            $this->productId                      = func_get_arg(24);
            $this->stockId                        = func_get_arg(25);
            $this->extensionAttributes            = func_get_arg(26);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['qty']                               = $this->qty;
        $json['is_in_stock']                       = $this->isInStock;
        $json['is_qty_decimal']                    = $this->isQtyDecimal;
        $json['show_default_notification_message'] = $this->showDefaultNotificationMessage;
        $json['use_config_min_qty']                = $this->useConfigMinQty;
        $json['min_qty']                           = $this->minQty;
        $json['use_config_min_sale_qty']           = $this->useConfigMinSaleQty;
        $json['min_sale_qty']                      = $this->minSaleQty;
        $json['use_config_max_sale_qty']           = $this->useConfigMaxSaleQty;
        $json['max_sale_qty']                      = $this->maxSaleQty;
        $json['use_config_backorders']             = $this->useConfigBackorders;
        $json['backorders']                        = $this->backorders;
        $json['use_config_notify_stock_qty']       = $this->useConfigNotifyStockQty;
        $json['notify_stock_qty']                  = $this->notifyStockQty;
        $json['use_config_qty_increments']         = $this->useConfigQtyIncrements;
        $json['qty_increments']                    = $this->qtyIncrements;
        $json['use_config_enable_qty_inc']         = $this->useConfigEnableQtyInc;
        $json['enable_qty_increments']             = $this->enableQtyIncrements;
        $json['use_config_manage_stock']           = $this->useConfigManageStock;
        $json['manage_stock']                      = $this->manageStock;
        $json['low_stock_date']                    = $this->lowStockDate;
        $json['is_decimal_divided']                = $this->isDecimalDivided;
        $json['stock_status_changed_auto']         = $this->stockStatusChangedAuto;
        $json['item_id']                           = $this->itemId;
        $json['product_id']                        = $this->productId;
        $json['stock_id']                          = $this->stockId;
        $json['extension_attributes']              = $this->extensionAttributes;

        return $json;
    }
}
